@page "/ValidationMessage"

@using Syncfusion.Blazor.Form;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Forms;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.DropDowns;

<h3>Validation Message</h3>

<div class="row">
    <div class="col-md-6">
        <div id="Propertypanel">
            <SfDropDownList TValue="FormValidationMessageDisplay" @bind-Value="@Validation" Width="100%" TItem="string" DataSource="@EnumValues"></SfDropDownList>
        </div>
    </div>
    <div class="col-md-6">
        <SfDataForm ID="MyForm"
                    Model="@exampleModel"
                    Width="100%"
                    LabelPosition="FormLabelPosition.Top"
                    ButtonsAlignment="FormButtonsAlignment.Center"
                    ValidationMessageDisplay="@Validation" OnSubmit="HandleFormSubmit">
            <FormValidation>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidation>
            <FormItems>
                <FormAutoGeneratedItems></FormAutoGeneratedItems>
            </FormItems>
            <FormButtons>
                <SfButton>Submit</SfButton>
            </FormButtons>
        </SfDataForm>
    </div>
</div>

@code {

    public string[] EnumValues = Enum.GetNames(typeof(FormValidationMessageDisplay));

    private async Task HandleFormSubmit(EditContext editContext)
    {
        bool isFormValid = editContext.Validate();
    }

    FormValidationMessageDisplay Validation { get; set; } = FormValidationMessageDisplay.Inline;

    private EmployeeDetails exampleModel = new EmployeeDetails();

    public class EmployeeDetails
    {
        [Editable(false)]
        [Display(Name = "Employee ID")]
        public int? EmployeeId { get; set; }
        [Required(ErrorMessage = "First Name is required")]
        [Display(Name = "First Name")]
        public string FirstName { get; set; }
        [Required(ErrorMessage = "Last Name is required")]
        [Display(Name = "Last Name")]
        public string LastName { get; set; }
        [Required(ErrorMessage = "Date Of Birth is required")]
        [Display(Name = "Date Of Birth")]
        public DateTime? DateOfBirth { get; set; }
        [Required(ErrorMessage = "Department is required")]
        [Display(Name = "Department")]
        public string Department { get; set; }
        [Required(ErrorMessage = "Please choose the country")]
        [Display(Name = "Country")]
        public string Country { get; set; }
    }
}