@page "/Api"

@using Syncfusion.Blazor.Form
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns



<h3>Registration Details</h3>
<div class="form-container">
    <SfDataForm ID="MyForm"
                Model="@exampleModel"
                Width="50%"
                LabelPosition="Labelposition"
                ButtonsAlignment="Buttonsalignment"
                ValidationMessageDisplay="@Validation" OnSubmit="HandleFormSubmit" OnUpdate="FormUpdate">
        <FormValidation>
            <DataAnnotationsValidator></DataAnnotationsValidator>
        </FormValidation>
        <FormItems>
            <FormItem Field="@nameof(exampleModel.FirstName)" LabelText="LastName"> </FormItem>
            <FormItem Field="@nameof(exampleModel.LastName)" LabelText="LastName"> </FormItem>
            <FormItem Field="@nameof(exampleModel.EmailID)" LabelText="Email" Placeholder="Enter Email"></FormItem>
            <FormItem Field="@nameof(exampleModel.DateOfBirth)" LabelText="Date Of Birth" Placeholder="Enter Date Of Birth"></FormItem>
            <FormItem Field="@nameof(exampleModel.AcceptTerms)" EditorType="FormEditorType.Switch" LabelText="Agree to the terms and Conditions" Placeholder="Enter Date Of Birth"></FormItem>
        </FormItems>
        <FormButtons>
            <SfButton>Submit</SfButton>
        </FormButtons>
    </SfDataForm>

    <div id="PropertyPanel">
        <label>Button Position</label>
        <SfDropDownList TValue="FormButtonsAlignment" TItem="string" @bind-Value="@Buttonsalignment" DataSource="ButtonAlignment"></SfDropDownList>
        <label>Label Position</label>
        <SfDropDownList TValue="FormLabelPosition" TItem="string" @bind-Value="@Labelposition" DataSource="LabelPosition"></SfDropDownList>
    </div>
</div>
@code {
    FormButtonsAlignment Buttonsalignment = FormButtonsAlignment.Right;
    FormLabelPosition Labelposition = FormLabelPosition.Left;
    string[] LabelPosition = Enum.GetNames(typeof(FormLabelPosition));
    string[] ButtonAlignment = Enum.GetNames(typeof(FormButtonsAlignment));
    private void FormUpdate(FormUpdateEventArgs args)
    {

    }

    private async Task HandleFormSubmit(EditContext editContext)
    {
        bool isFormValid = editContext.Validate();
    }

    FormValidationMessageDisplay Validation { get; set; } = FormValidationMessageDisplay.Inline;

    public class RegistrationDetails
    {

        [Required(ErrorMessage = "First Name is required")]
        public string FirstName { get; set; }
        [Required(ErrorMessage = "Last Name is required")]
        public string LastName { get; set; }
        [Required(ErrorMessage = "Email is required")]
        public string EmailID { get; set; }
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
        [Required(ErrorMessage = "Date Of Birth is required")]
        public DateTime? DateOfBirth { get; set; }
        [Required(ErrorMessage = "Agree to the terms and conditions")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the Terms and Conditions")]
        public bool AcceptTerms { get; set; }
    }

    private RegistrationDetails exampleModel = new RegistrationDetails();
}



<style>
    .form-container {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

        .form-container > * {
            width: 48%;
        }

    #PropertyPanel {
        margin-top: 2rem;
    }
</style>

